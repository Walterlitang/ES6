正则表达式：有规律的表达式，也是对象
    1.匹配符合的表达式
    2.过滤、替换掉一些铭感词
    3.从字符串中提取特定部分

1.通过 RegExp 来创建：
    var 变量名 = new RegExp(/表达式/);

2.通过字面量来创建
    var 变量名 = /表达式/

测试正则表达式是否符合规范：
    regexObj.test(str);

特殊字符：
    边界符：
        ^：以谁开始
        $：以谁结束
        /^abc$/：必须是abc三个，多少都不行

    字符类：
        [abc]：只要包含有 abc 其中一个就是对的
        /abc/：必须包含 abc 才是正确的
        /^[abc]$/：只能是 abc 中的一个

        -：范围
            /^[a-z]$/：a-z 之间任何一个都可以

        字符组合：
            /^[a-z0-9A-Z]_$/：a到z，0到9，A到Z 中的任何一个都可以

        [^0-9]：中括号里的是取反的意思，即不能包含数字



    量词符：
        *：重复 0 次或 多次
        +：必须重复一次以上
        ?：必须是 一次 或者 0次
        {3}：重复三次
        {3,}：大于等于三次
        {3,16}：3到16次
        (abc){3}：让 abc 重复三次

预定义类：
    \d：匹配 0-9 之间的任一数字
    \D：匹配 除了0-9 之外的任一字符
    \w:匹配任意 数字、字母、下划线
    \W:取反\w
    \s:匹配空格（包括换行符、制表符等）
    \S：取反\s


正则表达式的替换：
    Obj.replace("要替换的","替换的内容")
    /表达式/[switch]
    switch：g（全局匹配）

